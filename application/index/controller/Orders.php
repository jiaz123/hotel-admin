<?php

namespace app\index\controller;

use think\Controller;
use think\Db;
use think\Exception;
use think\Request;

class Orders extends Controller
{
    public $code;
    public $model;
    public $validate;
    public function __construct(Request $request = null)
    {
        parent::__construct($request);
        $this->code = config('code');
        $this->model = model('Orders');
//        $this->validate=$this->validate();
    }
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        checkUserToken();
    }

    /**
     * 显示资源列表
     * 获取某用户指定类型的订单
     * @return \think\Response
     */
    public function index()
    {
        //
        $id = $this->request->uid;
        $data = $this->request->get();
        $where=[
            'uid'=>$id
        ];
        if(isset($data['field'])&&!empty($data['field'])){
            $where['status']=$data['field'];
        }
        $result=Db::name('orders')->alias('o')->join('homestay h','o.sid = h.sid')->where($where)->field('o.enter_time,o.leave_time,o.price,h.sthumb,h.sname,o.status,o.oid,o.sid')->select();
        if ($result){
            return json([
                'code'=>200,
                'msg'=>'数据获取成功',
                'data'=>$result
            ]);
        }else{
            return json([
                'code'=>404,
                'msg'=>'暂无数据'
            ]);
        }
    }

    /**
     * 显示创建资源表单页.
     *
     * @return \think\Response
     */
    public function create()
    {
        //

    }

    /**
     * 保存新建的资源
     *
     * @param  \think\Request  $request
     * @return \think\Response
     */
    public function save(Request $request)
    {
        $data = $this->request->post();
//        $this->validate->sence->check();
        $data['status'] = 1;
        $homestayModel = model('Homestay');
        $data['uid'] = $this->request->uid;
        $status=Db::table('homestay')->field('status')->where('sid',$data['sid'])->find();
        // 该用户是否存在未支付的订单
        if ($status['status'] == 1){
            Db::startTrans();
            try {
                $orderResult = $this->model->add($data);
                $lastid = $this->model->getLastInsID();
                $homestayResult=$homestayModel->edit(['status'=>0],['sid'=>$data['sid']]);
                if ($orderResult && $homestayResult){
                    Db::commit();
                    return json([
                        'code'=>200,
                        'msg'=>'下单成功',
                        'oid'=>$lastid
                    ]);
                }
            }catch (Exception $exception){
                Db::rollback();
                return json([
                    'code'=>404,
                    'msg'=>'下单失败'
                ]);
            }
        }else{
            return json([
                'code'=>404,
                'msg'=>'该房间已被预定'
            ]);
        }
    }

    /**
     * 显示指定的资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function read($id)
    {
        //

    }

    /**
     * 显示编辑资源表单页.
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * 保存更新的资源
     *
     * @param  \think\Request  $request
     * @param  int  $id
     * @return \think\Response
     */
    public function update(Request $request, $id)
    {
        //
        $oid = $id;
        $status = Db::table('orders')->field('status')->where('oid',$oid)->find();
        if ($status && $status['status'] == 1){
            Db::table('orders')->where('oid',$oid)->update(['status'=>2]);
            return json([
                'code'=>200,
                'msg'=>'付款成功'
            ]);
        }else if ($status && $status['status'] == 2){
            return json([
                'code'=>404,
                'msg'=>'该房间已付款'
            ]);
        }
    }

    /**
     * 删除指定资源
     * // 取消订单
     * @param  int  $id
     * @return \think\Response
     */
    public function delete($id)
    {
        $status = Db::table('orders')->field('status')->where('oid',$id)->find();
        //未付款1 已付款2 完成3 退款4
        if ($status && $status['status'] == 2){
            Db::table('orders')->where('oid',$id)->update(['status'=>4]);
            return json([
                'code'=>200,
                'msg'=>'取消订单成功,退款将于24小时内返回您的账户'
            ]);
        }else if ($status && $status['status'] == 1){
            Db::table('orders')->where('oid',$id)->update(['status'=>3]);
            return json([
                'code'=>200,
                'msg'=>'取消订单成功'
            ]);
        }else{
            return json([
                'code'=>404,
                'msg'=>'该订单已完成或正在退款中'
            ]);
        }

    }
}

// $this->model->getLastSql()  输出上一次执行的sql语句
//$result = Db::table()->where()->fetchSql()->select();fetchSql 将连贯操作的sql语句打印出来，不执行